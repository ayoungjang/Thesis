set.seed(x) # reset
# with chosen mean and SD
lab <- 1:n_o
stam <- as.character(x)
Y_act <- numeric(n_o)
Y_obs <- numeric(n_o) # can divide log2
lower <- numeric(n_o)
upper <- numeric(n_o)
MIC <- numeric(n_o)
# Y_act <- generate_random_numbers(n_o, mic_value, sd, min_value, max_value,mic_value)
# Y_act <- rtruncnorm(n = n_o, a = min_value, b = max_value, mean = mic_value, sd = sd)
for (i in 1:n_o) {
mic_idx <- sample(1:length(mic_arr), 1)
mic_value <- mic_arr[mic_idx]
# m <- round(runif(1, min = 1, max = 32), 1)
sd <- mic_value * 2
min_idx <- ifelse(mic_idx == 1, 1, mic_idx - 1)
max_idx <- ifelse(mic_idx == length(mic_arr), length(mic_arr), mic_idx + 1)
min_value <- mic_arr[min_idx]
max_value <- mic_arr[max_idx]
randNum <- sample(1:length(mic_arr), 1)
mean_val <- 2^(log2(mic_arr[randNum]))
std_val <- 2 * mic_arr[randNum]
Y_act[i] <- get_truncated_normal(mean_val, std_val, 0, 64, n_o)[1]
Y_act[i] <- max(lb, Y_act[i])
Y_obs[i] <- 2^ceiling(log2(Y_act[i]))
lower[i] <- 2^floor(log2(Y_act[i]))
upper[i] <- 2^ceiling(log2(Y_act[i]))
MIC[i] <- mic_value
}
# mean should be close to 4
sample.data <- rbind(sample.data, data.frame(lab, stam, MIC, Y_act, Y_obs, lower, upper))
}
# nolint: commented_code_linter.
# Adjusted code for Han de Neeling data
library(survival)
library(R2WinBUGS)
library(survminer)
library(dplyr)
library(fitdistrplus)
library(ggplot2)
library(truncnorm)
setwd("C:/Users/ayoung/Desktop/Thesis/RCode")
getwd()
min_v <- 1
max_v <- 32
s <- 30 # strain numbers
n_o <- 10 # number of observations
# random number within boundaries
lb <- 0.0125 # lower boundary
ub <- 32 # upper boundary
left <- 0.03125
right <- 16
# 1< MIC < 32 increasing MIC
mic_arr <- c( 0.25, 1, 2, 4, 8, 16, 32)
sample.data <- data.frame()
refmic_sample.data <- data.frame()
get_truncated_normal <- function(mean, sd, low, upp, n) {
return(rtruncnorm(n, a = (low - mean) / sd, b = (upp - mean) / sd, mean = mean, sd = sd))
}
for (x in 1:s) {
set.seed(x) # reset
# with chosen mean and SD
lab <- 1:n_o
stam <- as.character(x)
Y_act <- numeric(n_o)
Y_obs <- numeric(n_o) # can divide log2
lower <- numeric(n_o)
upper <- numeric(n_o)
MIC <- numeric(n_o)
# Y_act <- generate_random_numbers(n_o, mic_value, sd, min_value, max_value,mic_value)
# Y_act <- rtruncnorm(n = n_o, a = min_value, b = max_value, mean = mic_value, sd = sd)
for (i in 1:n_o) {
mic_idx <- sample(1:length(mic_arr), 1)
mic_value <- mic_arr[mic_idx]
# m <- round(runif(1, min = 1, max = 32), 1)
sd <- mic_value * 2
min_idx <- ifelse(mic_idx == 1, 1, mic_idx - 1)
max_idx <- ifelse(mic_idx == length(mic_arr), length(mic_arr), mic_idx + 1)
min_value <- mic_arr[min_idx]
max_value <- mic_arr[max_idx]
randNum <- sample(1:length(mic_arr), 1)
mean_val <- 2^(log2(mic_arr[randNum]))
std_val <- 2 * mic_arr[randNum]
Y_act[i] <- get_truncated_normal(mean_val, std_val, 0, 64, n_o)[1]
Y_act[i] <- max(lb, Y_act[i])
Y_obs[i] <- 2^ceiling(log2(Y_act[i]))
lower[i] <- 2^floor(log2(Y_act[i]))
upper[i] <- 2^ceiling(log2(Y_act[i]))
MIC[i] <- mic_value
}
# mean should be close to 4
sample.data <- rbind(sample.data, data.frame(lab, stam, MIC, Y_act, Y_obs, lower, upper))
}
lab <- 1:s
Y_act <- numeric(s)
Y_obs <- numeric(s) # can divide log2
lower <- numeric(s)
upper <- numeric(s)
MIC <- numeric(s)
stam <- 1:s
for (x in 1:s) {
set.seed(x) # reset
# with chosen mean and SD
mic_idx <- sample(1:length(mic_arr), 1)
mic_value <- mic_arr[mic_idx]
# m <- round(runif(1, min = 1, max = 32), 1)
sd <- mic_value * 2
min_idx <- ifelse(mic_idx == 1, 1, mic_idx - 1)
max_idx <- ifelse(mic_idx == length(mic_arr), length(mic_arr), mic_idx + 1)
min_value <- mic_arr[min_idx]
max_value <- mic_arr[max_idx]
randNum <- sample(1:length(mic_arr), 1)
mean_val <- 2^(log2(mic_arr[randNum]))
std_val <- 2 * mic_arr[randNum]
Y_act[x] <- get_truncated_normal(mean_val, std_val, 0, 64, 10)[1]
if(Y_act[x] <0) Y_act[x] = Y_act[x]*-1
lower[x] <- 2^floor(log2(Y_act[x]))
upper[x] <- 2^ceiling(log2(Y_act[x]))
MIC[x] <- mic_value
}
refmic_sample.data <-  data.frame(stam, MIC,upper,lower)
sample.data <- within(sample.data, {
# as character
# MIC <- as.character(MIC)
# event type: 3 = interval, 2 = left, 0 = right
event <- rep(3, nrow(sample.data))
event[Y_act < left] <- 2
# Set event to 2 for Y_act greater than right threshold
event[Y_act > right] <- 0
# log MIC
log.MIC <- log2(MIC)
# log MIC for naive mean
log.MIC.naive <- ifelse(event != 0, log.MIC - 0.5, log.MIC + 0.5)
# as Surv
mode.log.MIC <- log2(as.numeric(names(which.max(table(sample.data$MIC)))))
log.MIC.surv <- Surv(time = ifelse(event == 3, log.MIC - 1, log.MIC), time2 = log.MIC, event = event, type = "interval")
# lower and upper for WinBUGS
# lower <- ifelse(event == 3, log.MIC - 1, ifelse(event == 2, -100, log.MIC))
# upper <- ifelse(event == 3, log.MIC, ifelse(event == 2, log.MIC, 100))
})
# create censored data objects
refmic_sample.data <- within(refmic_sample.data, {
# as character
# MIC <- as.character(MIC)
# event type: 3 = interval, 2 = left, 0 = right
event <- rep(3, nrow(refmic_sample.data))
event[Y_act < left] <- 2
# Set event to 2 for Y_act greater than right threshold
event[Y_act > right] <- 0
# log MIC
log.MIC <- log2(MIC)
# log MIC for naive mean
log.MIC.naive <- ifelse(event != 0, log.MIC - 0.5, log.MIC + 0.5)
# as Surv
mode.log.MIC <- log2(as.numeric(names(which.max(table(sample.data$MIC)))))
log.MIC.surv <- Surv(time = ifelse(event == 3, log.MIC - 1, log.MIC), time2 = log.MIC, event = event, type = "interval")
# lower and upper for WinBUGS
# lower <- ifelse(event == 3, log.MIC - 1, ifelse(event == 2, -100, log.MIC))
# upper <- ifelse(event == 3, log.MIC, ifelse(event == 2, log.MIC, 100))
})
sample.data <- within(sample.data, {
stam <- gsub("stam", "strain", stam)
lab <- factor(lab)
stam <- factor(stam)
})
refmic_sample.data.sub <- subset(refmic_sample.data, select = c(stam, upper, lower, log.MIC))
names(refmic_sample.data.sub) <- c("stam", "upper.log.MIC.ref", "lower.log.MIC.ref", "log.MIC.ref")
# working dir
wbwd <- file.path(getwd(), "WinBUGS")
# bugs model
cat("model {
for (i in 1:n) {
y[i] ~ dnorm(mu[i], tau)I(lower[i], upper[i])
mu[i] <- inprod2(X[i, ], beta[]) + b.lab[lab[i]]
}
for (j in 1:n.lab) {
b.lab[j] ~ dnorm(0.0, tau.lab)
}
for (k in 1:n.beta) {
beta[k] ~ dnorm(0.0, 1.0E-4)
}
tau <- pow(sigma, -2)
sigma ~ dunif(0.01, 100)
tau.lab <- pow(sigma.lab, -2)
sigma.lab ~ dunif(0.01, 100)
}
}", file = file.path(wbwd, "model.txt"))
# bugs data
X <- model.matrix(~ (stam)^2, data = sample.data)
n <- nrow(X)
n.beta <- ncol(X)
n.lab <- n_o
bugs.data <- with(sample.data, list(n = n, lower = lower, upper = upper, X = X, n.beta = n.beta, n.lab = n.lab, lab = as.numeric(lab)))
# bugs inits
bugs.inits <- function() {
list(y = with(sample.data, runif(n, lower, upper)), b.lab = rnorm(n.lab, 0, 0.1), beta = rnorm(n.beta), sigma = runif(1), sigma.lab = runif(1))
}
# bugs fit
bugs.fit <- bugs(
model.file = "model.txt", data = bugs.data, inits = bugs.inits,
parameters.to.save = c("beta", "b.lab", "sigma", "sigma.lab"),
n.chains = 2, n.iter = 5100, n.burnin = 100, n.thin = 10, debug = F, DIC = F, working.directory = wbwd
)
read.bugsfit <- T
if (read.bugsfit) {
old.wd <- getwd()
setwd(wbwd)
bugs.fit <<- R2WinBUGS:::bugs.sims(
n.chains = 2, n.iter = 5100, n.burnin = 100, n.thin = 10,
parameters.to.save = c("beta", "b.lab", "sigma", "sigma.lab"), DIC = F
)
class(bugs.fit) <- "bugs"
setwd(old.wd)
}
attach.bugs(bugs.fit)
colSD <- function(x) { # sd
sqrt(colSums((x - colMeans(x))^2) / (nrow(x) - 1))
}
sample.data$lab <- as.factor(sample.data$lab)
lab.data <- data.frame(
lab = levels(sample.data$lab),
diff.log.MIC = colMeans(b.lab),
lower.diff.log.MIC = apply(b.lab, 2, quantile, 0.025),
upper.diff.log.MIC = apply(b.lab, 2, quantile, 0.975)
)
sample.data$stam <- as.factor(sample.data$stam)
# make sample new data
refmic_sample.newdata <- with(sample.data, expand.grid(stam = levels(stam)))
refmic_sample.newdata <- within(refmic_sample.newdata, {
mode.log.MIC <- NA
E.log.MIC.naive <- NA
se.log.MIC.naive <- NA
})
k <- 1
for (j in 1:nlevels(sample.data$stam)) {
stam_value <- levels(sample.data$stam)[j]
print( subset(sample.data, stam == stam_value))
sample.data.sub <- subset(sample.data, stam == stam_value)
mod <- with(sample.data.sub, lm(log.MIC.naive ~ 1))
refmic_sample.newdata$mode.log.MIC[k] <- log2(as.numeric(names(which.max(table(sample.data.sub$MIC)))))
refmic_sample.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
k<-k+1
}
View(sample.data)
View(sample.data)
read.bugsfit <- T
if (read.bugsfit) {
old.wd <- getwd()
setwd(wbwd)
bugs.fit <<- R2WinBUGS:::bugs.sims(
n.chains = 2, n.iter = 5100, n.burnin = 100, n.thin = 10,
parameters.to.save = c("beta", "b.lab", "sigma", "sigma.lab"), DIC = F
)
class(bugs.fit) <- "bugs"
setwd(old.wd)
}
attach.bugs(bugs.fit)
colSD <- function(x) { # sd
sqrt(colSums((x - colMeans(x))^2) / (nrow(x) - 1))
}
sample.data$lab <- as.factor(sample.data$lab)
lab.data <- data.frame(
lab = levels(sample.data$lab),
diff.log.MIC = colMeans(b.lab),
lower.diff.log.MIC = apply(b.lab, 2, quantile, 0.025),
upper.diff.log.MIC = apply(b.lab, 2, quantile, 0.975)
)
sample.data$stam <- as.factor(sample.data$stam)
# make sample new data
refmic_sample.newdata <- with(sample.data, expand.grid(stam = levels(stam)))
refmic_sample.newdata <- within(refmic_sample.newdata, {
mode.log.MIC <- NA
E.log.MIC.naive <- NA
se.log.MIC.naive <- NA
})
k <- 1
for (j in 1:nlevels(sample.data$stam)) {
stam_value <- levels(sample.data$stam)[j]
print( subset(sample.data, stam == stam_value))
sample.data.sub <- subset(sample.data, stam == stam_value)
mod <- with(sample.data.sub, lm(log.MIC.naive ~ 1))
refmic_sample.newdata$mode.log.MIC[k] <- log2(as.numeric(names(which.max(table(sample.data.sub$MIC)))))
refmic_sample.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
k<-k+1
}
refmic_sample.newdata <- within(refmic_sample.newdata, {
lower.log.MIC.naive <- E.log.MIC.naive - 1.96 * se.log.MIC.naive
upper.log.MIC.naive <- E.log.MIC.naive + 1.96 * se.log.MIC.naive
})
X.samplepred <- model.matrix(~ (stam)^2, data = refmic_sample.newdata)
mu <- X.samplepred %*% t(beta)
dim(X.samplepred)
dim(beta)
refmic_sample.newdata <- within(refmic_sample.newdata, {
E.log.MIC <- colMeans(mu)
lower.log.MIC <- apply(mu, 2, quantile, 0.025)
upper.log.MIC <- apply(mu, 2, quantile, 0.975)
})
refmic_sample.newdata <- merge(refmic_sample.newdata, refmic_sample.data.sub, sort = F)
# labs compared to mean
pdf(file = "resultaten/figure_sample_3.pdf", width = 7, height = 7)
par(mar = c(4.5, 4.5, 0.5, 0.5), yaxs = "i")
plot.new()
refmic_sample.newdata <- merge(refmic_sample.newdata, refmic_sample.data.sub, sort = F)
# labs compared to mean
pdf(file = "resultaten/figure_sample_3.pdf", width = 7, height = 7)
par(mar = c(4.5, 4.5, 0.5, 0.5), yaxs = "i")
plot.new()
plot.window(xlim = c(-2, 2), c(n.lab + 1, 0))
abline(h = 1:n.lab, col = 8, lty = 3)
box()
axis(1, at = seq(-2, 2, 1), labels = 2^seq(-2, 2, 1))
axis(2, at = 1:n.lab, labels = lab.data$lab)
abline(v = 0, lty = 2)
title(xlab = "Fold difference in MIC compared to the expected mean", ylab = "Laboratory number")
with(lab.data, {
points(diff.log.MIC, 1:n.lab, pch = 15)
segments(lower.diff.log.MIC, 1:n.lab, upper.diff.log.MIC, 1:n.lab)
})
dev.off()
sample.newdata$stam <- factor(sample.newdata$stam, levels = unique(sample.newdata$stam[order(as.numeric(sample.newdata$stam))]))
pdf_path <- "resultaten/figure_sample_4_plot.pdf"
pdf(file = pdf_path, width = 7, height = 7 * sqrt(2))
n <- ncol(X.samplepred)
d <- 0.25
par(mar = c(4.5, 5.5, 0.5, 0.5), yaxs = "i")
plot.new()
plot.window(xlim = c(-10, 6), c(n + 0.5, 0.5))
abline(h = seq(0.5, n + 0.5, 1), col = 8)
abline(h = c(10.5, 20.5), lwd = 2)
box()
axis(1, at = seq(-10, 6, 2), labels = signif(2^seq(-10, 6, 2), 3), cex.axis = 0.7)
axis(2, at = 1:n, labels = with(refmic_sample.newdata, levels(interaction(stam, sep = " "))), las = 1, cex.axis = 0.7)
title(xlab = "MIC")
with(refmic_sample.newdata, {
points(mode.log.MIC, 1:length(mode.log.MIC), pch = 0, cex = 0.7)
points(E.log.MIC, 1:length(E.log.MIC) - d, pch = 15, cex = 0.7)
segments(lower.log.MIC, 1:length(lower.log.MIC) - d, upper.log.MIC, 1:length(upper.log.MIC) - d)
points(lower.log.MIC.ref, 1:length(lower.log.MIC.ref) + d, col = 1, cex = 0.7)
points(upper.log.MIC.ref, 1:length(upper.log.MIC.ref) + d, col = 1, pch = 16, cex = 0.7)
segments(lower.log.MIC.ref, 1:length(lower.log.MIC.ref) + d, upper.log.MIC.ref, 1:length(upper.log.MIC.ref) + d, col = 1)
})
dev.off()
sample.newdata$stam <- factor(sample.newdata$stam, levels = unique(sample.newdata$stam[order(as.numeric(sample.newdata$stam))]))
d <- 0.25
pdf_path <- "resultaten/figure_4.pdf"
pdf(file = pdf_path, width = 7, height = 7*sqrt(2))
par(mar = c(4.5, 5.5, 0.5, 0.5), yaxs = "i");
plot.new();
plot.window(xlim = c(-10, 6), c(n+0.5, 0.5))
abline(h = seq(0.5, n+0.5, 1), col = 8);
abline(h = c(10.5, 20.5), lwd = 2); box()
axis(1, at = seq(-10, 6, 2), labels = signif(2^seq(-10, 6, 2), 3), cex.axis = 0.7)
axis(2, at = 1:n, labels = with(sample.newdata, levels(interaction(stam,sep = " "))), las = 1, cex.axis = 0.7)
title(xlab = "MIC")
with(sample.newdata, {
points(mode.log.MIC, 1:n, pch = 0, cex = 0.7)
points(E.log.MIC, 1:n-d, pch = 15, cex = 0.7)
segments(lower.log.MIC, 1:n-d, upper.log.MIC, 1:n-d)
points(lower.log.MIC.ref, 1:n+d, col = 1, cex = 0.7)
points(upper.log.MIC.ref, 1:n+d, col = 1, pch = 16, cex = 0.7)
segments(lower.log.MIC.ref, 1:n+d, upper.log.MIC.ref, 1:n+d, col = 1)
})
dev.off()
system(paste("open", pdf_path))
refmic_sample.data.sub <- subset(refmic_sample.data, select = c(stam, upper, lower, log.MIC))
View(refmic.data.sub)
refmic_sample.data.sub <- subset(refmic_sample.data, select = c(stam, upper, lower, log.MIC))
names(refmic_sample.data.sub) <- c("stam", "upper.log.MIC.ref", "lower.log.MIC.ref", "log.MIC.ref")
View(refmic.data.sub)
View(refmic_sample.data.sub)
sample.data$stam <- as.factor(sample.data$stam)
# make sample new data
refmic_sample.newdata <- with(sample.data, expand.grid(stam = levels(stam)))
refmic_sample.newdata <- within(refmic_sample.newdata, {
mode.log.MIC <- NA
E.log.MIC.naive <- NA
se.log.MIC.naive <- NA
})
k <- 1
for (j in 1:nlevels(sample.data$stam)) {
stam_value <- levels(sample.data$stam)[j]
print( subset(sample.data, stam == stam_value))
sample.data.sub <- subset(sample.data, stam == stam_value)
mod <- with(sample.data.sub, lm(log.MIC.naive ~ 1))
refmic_sample.newdata$mode.log.MIC[k] <- log2(as.numeric(names(which.max(table(sample.data.sub$MIC)))))
refmic_sample.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
k<-k+1
}
View(refmic.data.sub)
refmic_sample.newdata <- within(refmic_sample.newdata, {
lower.log.MIC.naive <- E.log.MIC.naive - 1.96 * se.log.MIC.naive
upper.log.MIC.naive <- E.log.MIC.naive + 1.96 * se.log.MIC.naive
})
X.samplepred <- model.matrix(~ (stam)^2, data = refmic_sample.newdata)
mu <- X.samplepred %*% t(beta)
dim(X.samplepred)
dim(beta)
refmic_sample.newdata <- within(refmic_sample.newdata, {
E.log.MIC <- colMeans(mu)
lower.log.MIC <- apply(mu, 2, quantile, 0.025)
upper.log.MIC <- apply(mu, 2, quantile, 0.975)
})
View(refmic_sample.newdata)
# winbugs
X.pred <- model.matrix(~ (stam+ant)^2, data = refmic.newdata)
mu <- t(X.pred%*%t(beta))
dim(X.pred)
dim(beta)
View(refmic.newdata)
# make refmic.newdata
refmic.newdata <- with(gono.data, expand.grid(stam = levels(stam), ant = levels(ant)))
# naive mean and mode
refmic.newdata <- within(refmic.newdata, {mode.log.MIC <- NA; E.log.MIC.naive <- NA; se.log.MIC.naive <- NA;})
k<-1
gono.data$ant <- as.factor(gono.data$ant)
for (i in 1:nlevels(gono.data$ant)) { #nlevels -> delete duplicated factor level count return (=distinct value)
for (j in 1:nlevels(gono.data$stam)) {
ant_value <- levels(gono.data$ant)[i]
stam_value <- levels(gono.data$stam)[j]
print(stam_value)
gono.data.sub <- subset(gono.data, ant == ant_value & stam == stam_value)
mod <- with(gono.data.sub, lm(log.MIC.naive ~ 1))
refmic.newdata[k, "mode.log.MIC"] <- log2(as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", names(which.max(table(gono.data.sub$MIC)))))))))
refmic.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
k <- k+1
}
}
refmic.newdata <- within(refmic.newdata, {
lower.log.MIC.naive <- E.log.MIC.naive-1.96*se.log.MIC.naive
upper.log.MIC.naive <- E.log.MIC.naive+1.96*se.log.MIC.naive
})
# winbugs
X.pred <- model.matrix(~ (stam+ant)^2, data = refmic.newdata)
mu <- t(X.pred%*%t(beta))
dim(X.pred)
dim(beta)
View(refmic.newdata)
View(X.pred)
View(X.samplepred)
View(X.pred)
View(X.samplepred)
View(X.pred)
View(X.samplepred)
View(refmic.newdata)
View(refmic_sample.newdata)
# naive mean and mode
refmic.newdata <- within(refmic.newdata, {mode.log.MIC <- NA; E.log.MIC.naive <- NA; se.log.MIC.naive <- NA;})
k<-1
gono.data$ant <- as.factor(gono.data$ant)
for (i in 1:nlevels(gono.data$ant)) { #nlevels -> delete duplicated factor level count return (=distinct value)
for (j in 1:nlevels(gono.data$stam)) {
ant_value <- levels(gono.data$ant)[i]
stam_value <- levels(gono.data$stam)[j]
print(stam_value)
gono.data.sub <- subset(gono.data, ant == ant_value & stam == stam_value)
mod <- with(gono.data.sub, lm(log.MIC.naive ~ 1))
refmic.newdata[k, "mode.log.MIC"] <- log2(as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", names(which.max(table(gono.data.sub$MIC)))))))))
refmic.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
k <- k+1
}
}
refmic.newdata <- within(refmic.newdata, {
lower.log.MIC.naive <- E.log.MIC.naive-1.96*se.log.MIC.naive
upper.log.MIC.naive <- E.log.MIC.naive+1.96*se.log.MIC.naive
})
# winbugs
X.pred <- model.matrix(~ (stam+ant)^2, data = refmic.newdata)
mu <- t(X.pred%*%t(beta))
dim(X.pred)
dim(beta)
refmic.newdata <- within(refmic.newdata, {
E.log.MIC <- colMeans(mu)
lower.log.MIC <- apply(mu, 2, quantile, 0.025)
upper.log.MIC <- apply(mu, 2, quantile, 0.975)
})
refmic.newdata <- merge(refmic.newdata, refmic.data.sub, sort = F)
View(refmic.newdata)
sample.data$lab <- as.factor(sample.data$lab)
lab.data <- data.frame(
lab = levels(sample.data$lab),
diff.log.MIC = colMeans(b.lab),
lower.diff.log.MIC = apply(b.lab, 2, quantile, 0.025),
upper.diff.log.MIC = apply(b.lab, 2, quantile, 0.975)
)
sample.data$stam <- as.factor(sample.data$stam)
# make sample new data
refmic_sample.newdata <- with(sample.data, expand.grid(stam = levels(stam)))
refmic_sample.newdata <- within(refmic_sample.newdata, {
mode.log.MIC <- NA
E.log.MIC.naive <- NA
se.log.MIC.naive <- NA
})
k <- 1
for (j in 1:nlevels(sample.data$stam)) {
stam_value <- levels(sample.data$stam)[j]
sample.data.sub <- subset(sample.data, stam == stam_value)
mod <- with(sample.data.sub, lm(log.MIC.naive ~ 1))
refmic_sample.newdata$mode.log.MIC[k] <- log2(as.numeric(names(which.max(table(sample.data.sub$MIC)))))
refmic_sample.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
k<-k+1
}
refmic_sample.newdata <- within(refmic_sample.newdata, {
lower.log.MIC.naive <- E.log.MIC.naive - 1.96 * se.log.MIC.naive
upper.log.MIC.naive <- E.log.MIC.naive + 1.96 * se.log.MIC.naive
})
X.samplepred <- model.matrix(~ (stam)^2, data = refmic_sample.newdata)
mu <- X.samplepred %*% t(beta)
dim(X.samplepred)
dim(beta)
View(sample.data)
