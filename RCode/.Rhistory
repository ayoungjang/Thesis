# nolint: commented_code_linter.
# Adjusted code for Han de Neeling data
library(survival)
library(R2WinBUGS)
library(survminer)
library(dplyr)
library(fitdistrplus)
library(ggplot2)
library(truncnorm)
setwd("C:/Users/ayoung/Desktop/Thesis/RCode")
getwd()
s <- 30 # strain numbers
n_o <- 10 # number of observations
# 10 lab 20 strains
# random number within boundaries
lb <- 0.0765 # lower boundary
ub <- 32 # upper boundary
left <- 0.00391 #can not be higher than mic boundary
right <- 64 # even higher
# 1< MIC < 32 increasing MIC
# mic_arr <- c(0.000977,0.00391,0.0156,0.0625,0.125, 0.25, 1, 2, 4, 8, 16, 32)
# mic_arr <- c(0.125, 0.25, 1, 2, 4, 8, 16, 32)
mic_arr <- c(0.0156,0.0625,0.125, 0.25, 1, 2, 4, 8, 16, 32)
# mic_arr <- c(0.125, 0.25, 1, 2, 4, 8, 16, 32)
sample.data <- data.frame()
refmic_sample.data <- data.frame()
for (x in 1:s) {
set.seed(x) # reset
# with chosen mean and SD
lab <- 1:n_o
stam <- as.character(x)
Y_act <- numeric(n_o)
Y_obs <- numeric(n_o) # can divide log2
lower <- numeric(n_o)
upper <- numeric(n_o)
MIC <- numeric(n_o)
mic_idx <- sample(1:length(mic_arr), 1)
mic_value <- mic_arr[mic_idx]
Y_act <- rnorm(n=n_o,mean=mic_value,sd=mic_value*2)
min_idx <- ifelse(mic_idx == 1, 1, mic_idx - 1)
max_idx <- ifelse(mic_idx == length(mic_arr), length(mic_arr), mic_idx + 1)
min_value <- mic_arr[min_idx]
max_value <- mic_arr[max_idx]
for (i in 1:n_o) {
MIC[i] <- mic_value
Y_act[i] <- max(lb, Y_act[i])
Y_act[i] <- min(ub,Y_act[i])
Y_obs[i] <- 2^ceiling(log2(Y_act[i]))
lower[i] <- 2^floor(log2(Y_act[i]))
upper[i] <- 2^ceiling(log2(Y_act[i]))
}
# mean should be close to 4
sample.data <- rbind(sample.data, data.frame(lab, stam, MIC, Y_act, Y_obs, lower, upper))
}
lab <- 1:s
stam <- 1:s
Y_act <- numeric(s)
Y_obs <- numeric(s) # can divide log2
lower <- numeric(s)
upper <- numeric(s)
MIC <- numeric(s)
for (x in 1:s) {
set.seed(x) # reset
mic_idx <- sample(1:length(mic_arr), 1)
mic_value <- mic_arr[mic_idx]
MIC[x] <- mic_value
Y_act[x] <- rnorm(n=1,mean=mic_value,sd=mic_value*2)
# with chosen mean and SD
if(Y_act[x] <0) Y_act[x] = Y_act[x]*-1
Y_act[x] <- max(lb, Y_act[x])
lower[x] <- 2^floor(log2(Y_act[x]))
upper[x] <- 2^ceiling(log2(Y_act[x]))
}
refmic_sample.data <-  data.frame(stam, MIC,upper,lower)
sample.data <- within(sample.data, {
# as character
# MIC <- as.character(MIC)
# event type: 3 = interval, 2 = left, 0 = right
event <- rep(3, nrow(sample.data))
event[Y_act < left] <- 2
# Set event to 2 for Y_act greater than right threshold
event[Y_act > right] <- 0
# log MIC
log.MIC <- log2(MIC)
# log MIC for naive mean
log.MIC.naive <- ifelse(event != 0, log.MIC - 0.5, log.MIC + 0.5)
# as Surv
mode.log.MIC <- log2(as.numeric(names(which.max(table(sample.data$MIC)))))
log.MIC.surv <- Surv(time = ifelse(event == 3, log.MIC - 1, log.MIC), time2 = log.MIC, event = event, type = "interval")
# # lower and upper for WinBUGS
lower <- ifelse(event == 3, log.MIC - 1, ifelse(event == 2, -100, log.MIC))
upper <- ifelse(event == 3, log.MIC, ifelse(event == 2, log.MIC, 100))
})
# create censored data objects
refmic_sample.data <- within(refmic_sample.data, {
# as character
# MIC <- as.character(MIC)
# event type: 3 = interval, 2 = left, 0 = right
event <- rep(3, nrow(refmic_sample.data))
event[Y_act < left] <- 2
# Set event to 2 for Y_act greater than right threshold
event[Y_act > right] <- 0
# log MIC
log.MIC <- log2(MIC)
# log MIC for naive mean
log.MIC.naive <- ifelse(event != 0, log.MIC - 0.5, log.MIC + 0.5)
# as Surv
mode.log.MIC <- log2(as.numeric(names(which.max(table(sample.data$MIC)))))
log.MIC.surv <- Surv(time = ifelse(event == 3, log.MIC - 1, log.MIC), time2 = log.MIC, event = event, type = "interval")
# lower and upper for WinBUGS
lower <- ifelse(event == 3, log.MIC - 1, ifelse(event == 2, -100, log.MIC))
upper <- ifelse(event == 3, log.MIC, ifelse(event == 2, log.MIC, 100))
})
sample.data <- within(sample.data, {
stam <- gsub("stam", "strain", stam)
lab <- factor(lab)
stam <- factor(stam)
})
refmic_sample.data.sub <- subset(refmic_sample.data, select = c(stam, upper, lower, log.MIC))
names(refmic_sample.data.sub) <- c("stam", "upper.log.MIC.ref", "lower.log.MIC.ref", "log.MIC.ref")
#
# model with WinBUGS
#
# working dir
wbwd <- file.path(getwd(), "WinBUGS")
# bugs model
cat("model {
for (i in 1:n) {
y[i] ~ dnorm(mu[i], tau)I(lower[i], upper[i])
mu[i] <- inprod2(X[i, ], beta[]) + b.lab[lab[i]]
}
for (j in 1:n.lab) {
b.lab[j] ~ dnorm(0.0, tau.lab)
}
for (k in 1:n.beta) {
beta[k] ~ dnorm(0.0, 1.0E-4)
}
tau <- pow(sigma, -2)
sigma ~ dunif(0.01, 100)
tau.lab <- pow(sigma.lab, -2)
sigma.lab ~ dunif(0.01, 100)
}
}", file = file.path(wbwd, "model.txt"))
# bugs data
X <- model.matrix(~ (stam)^2, data = sample.data)
n <- nrow(X)
n.beta <- ncol(X)
n.lab <- n_o
bugs.data <- with(sample.data, list(n = n, lower = lower, upper = upper, X = X, n.beta = n.beta, n.lab = n.lab, lab = as.numeric(lab)))
# bugs inits
bugs.inits <- function() {
list(y = with(sample.data, runif(n, lower, upper)), b.lab = rnorm(n.lab, -0.5,1), beta = rnorm(n.beta), sigma = runif(1), sigma.lab = runif(1))
}
# bugs fit
bugs.fit <- bugs(
model.file = "model.txt", data = bugs.data, inits = bugs.inits,
parameters.to.save = c("beta", "b.lab", "sigma", "sigma.lab"),
n.chains = 2, n.iter = 5100, n.burnin = 100, n.thin = 10, debug = F, DIC = F, working.directory = wbwd
)
read.bugsfit <- T
if (read.bugsfit) {
old.wd <- getwd()
setwd(wbwd)
bugs.fit <<- R2WinBUGS:::bugs.sims(
n.chains = 2, n.iter = 5100, n.burnin = 100, n.thin = 10,
parameters.to.save = c("beta", "b.lab", "sigma", "sigma.lab"), DIC = F
)
class(bugs.fit) <- "bugs"
setwd(old.wd)
}
attach.bugs(bugs.fit)
sample.data$lab <- as.factor(sample.data$lab)
# labs compared to mean
# confidence value
lab.data <- data.frame(
lab = levels(sample.data$lab),
diff.log.MIC = colMeans(b.lab),
lower.diff.log.MIC = apply(b.lab, 2, quantile, 0.025),
upper.diff.log.MIC = apply(b.lab, 2, quantile, 0.975))
sample.data$stam <- as.factor(sample.data$stam)
# make sample new data
refmic_sample.newdata <- with(sample.data, expand.grid(stam = levels(stam)))
refmic_sample.newdata <- within(refmic_sample.newdata, {
mode.log.MIC <- NA
E.log.MIC.naive <- NA
se.log.MIC.naive <- NA
})
k <- 1
for (j in 1:nlevels(sample.data$stam)) {
stam_value <- levels(sample.data$stam)[j]
sample.data.sub <- subset(sample.data, stam == stam_value)
mod <- with(sample.data.sub, lm(log.MIC.naive ~ 1))
refmic_sample.newdata[k, "mode.log.MIC"] <- log2(as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", names(which.max(table(sample.data.sub$MIC)))))))))
refmic_sample.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
k<-k+1
}
refmic_sample.newdata <- within(refmic_sample.newdata, {
lower.log.MIC.naive <- E.log.MIC.naive - 1.96 * se.log.MIC.naive
upper.log.MIC.naive <- E.log.MIC.naive + 1.96 * se.log.MIC.naive
})
X.samplepred <- model.matrix(~ (stam)^2, data = refmic_sample.newdata)
mu_sample <- t(X.samplepred%*%t(beta))
refmic_sample.newdata <- within(refmic_sample.newdata, {
E.log.MIC <- colMeans(mu_sample)
lower.log.MIC <- apply(mu_sample, 2, quantile, 0.025)
upper.log.MIC <- apply(mu_sample, 2, quantile, 0.975)
})
refmic_sample.newdata <- merge(refmic_sample.newdata, refmic_sample.data.sub, sort = F)
# labs compared to mean
pdf(file = "resultaten/figure_sample_3.pdf", width = 7, height = 7)
par(mar = c(4.5, 4.5, 0.5, 0.5), yaxs = "i")
plot.new()
plot.window(xlim = c(-2, 2), c(n.lab + 1, 0))
abline(h = 1:n.lab, col = 8, lty = 3)
box()
axis(1, at = seq(-2, 2, 1), labels = 2^seq(-2, 2, 1))
axis(2, at = 1:n.lab, labels = lab.data$lab)
abline(v = 0, lty = 2)
title(xlab = "Fold difference in MIC compared to the expected mean", ylab = "Laboratory number")
with(lab.data, {
points(diff.log.MIC, 1:n.lab, pch = 15)
segments(lower.diff.log.MIC, 1:n.lab, upper.diff.log.MIC, 1:n.lab)
})
dev.off()
system(paste("open", "resultaten/figure_sample_3.pdf"))
refmic_sample.newdata$stam <- factor(refmic_sample.newdata$stam, levels = unique(refmic_sample.newdata$stam[order(as.numeric(refmic_sample.newdata$stam))]))
n <- ncol(X.samplepred)
d <- 0.25
# pdf_path <- "resultaten/figure_sample_4_plot.pdf"
# pdf(file = pdf_path, width = 7, height = 7 * sqrt(2))
#
# par(mar = c(4.5, 5.5, 0.5, 0.5), yaxs = "i")
# plot.new()
# plot.window(xlim = c(-10, 6), c(n + 0.5, 0.5))
# abline(h = seq(0.5, n + 0.5, 1), col = 8)
# abline(h = c(10.5, 20.5), lwd = 2)
# box()
# axis(1, at = seq(-10, 6, 2), labels = signif(2^seq(-10, 6, 2), 3), cex.axis = 0.7)
# axis(2, at = 1:n, labels = with(refmic_sample.newdata, levels(interaction(stam, sep = " "))), las = 1, cex.axis = 0.7)
# title(xlab = "MIC")
#
# with(refmic_sample.newdata, {
#   points(mode.log.MIC, 1:length(mode.log.MIC), pch = 0, cex = 0.7)
#   points(E.log.MIC, 1:length(E.log.MIC) - d, pch = 15, cex = 0.7)
#   segments(lower.log.MIC, 1:length(lower.log.MIC) - d, upper.log.MIC, 1:length(upper.log.MIC) - d)
#   points(lower.log.MIC.ref, 1:length(lower.log.MIC.ref) + d, col = 1, cex = 0.7)
#   points(upper.log.MIC.ref, 1:length(upper.log.MIC.ref) + d, col = 1, pch = 16, cex = 0.7)
#   segments(lower.log.MIC.ref, 1:length(lower.log.MIC.ref) + d, upper.log.MIC.ref, 1:length(upper.log.MIC.ref) + d, col = 1)
# })
# legend("topright", legend = c("Mode", "E", "Reference", "Reference Upper", "Reference Lower"),
#         pch = c(0, 15, 1, 16, 1), col = c("black", "black", "black", "black", "black"), cex = 0.7, bty = "n")
# dev.off()
pdf_path <- "resultaten/figure_4.pdf"
pdf(file = pdf_path, width = 7, height = 7 * sqrt(2))
refmic_sample.newdata$stam <- factor(refmic_sample.newdata$stam, levels = unique(as.character(1:n)))
par(mar = c(8,5.5,2, 5), yaxs = "i");
plot.new();
plot.window(xlim = c(-10, 6), c(n+0.5, 0.5))
abline(h = seq(0.5, n+0.5, 1), col = 8);
abline(h = c(10.5, 20.5), lwd = 2); box()
axis(1, at = seq(-10, 6, 2), labels = signif(2^seq(-10, 6, 2), 3), cex.axis = 0.7)
axis(2, at = 1:n, labels = with(refmic_sample.newdata, levels(interaction(stam, sep = " "))), las = 1, cex.axis = 0.7)
title(xlab = "MIC")
with(refmic_sample.newdata, {
points(mode.log.MIC, 1:n, pch = 0, cex = 0.7) # open squares - mode MICs
points(E.log.MIC, 1:n-d, pch = 15, cex = 0.7) #solid square - Predicted mean MICs and 95% confidence intervals
segments(lower.log.MIC, 1:n-d, upper.log.MIC, 1:n-d)
points(lower.log.MIC.ref, 1:n+d, col = 1, cex = 0.7)#open circles - lower boundary accounting for interval censoring
points(upper.log.MIC.ref, 1:n+d, col = 1, pch = 16, cex = 0.7) #solid circles - reference MICs
segments(lower.log.MIC.ref, 1:n+d, upper.log.MIC.ref, 1:n+d, col = 1)
})
par(xpd=TRUE)
par(new=T)
par(fig=c(0, 1, 0, 0.2), mar=c(2,2,2,2))
#lower boundary accounting for
legend("bottomright", legend = c("Mode MICs", "mean MICs", "interval censoring", " reference MICs"),
pch = c(0, 15, 1, 16, 1), col = c("black", "black", "black", "black"),
cex = 0.7, bty = "n")
dev.off()
system(paste("open", pdf_path))
View(refmic_sample.data)
View(refmic_sample.data)
View(refmic_sample.data)
