lower <- ifelse(event==3, log.MIC-1, ifelse(event==2, -100, log.MIC))
upper <- ifelse(event==3, log.MIC, ifelse(event==2, log.MIC, 100))
})
library(survival)
library(R2WinBUGS)
library(survminer)
library(dplyr)
library(fitdistrplus)
library(openxlsx)
library(ggplot2)
library(reshape2)
setwd("C:/Users/ayoung/Desktop/Thesis/real_data")
getwd()
file <- "LRE_070723_Samlet.xlsx"
file2 <- "Fasit_kres_eu.xlsx"
Fasit_data<-read.xlsx(xlsxFile=file2)
Lre_data <- read.xlsx(xlsxFile=file)
names(Fasit_data) <- unname(Fasit_data[2, ])
Fasit_data <- Fasit_data[-1,]
Fasit_data <- Fasit_data[-1,]
# names(Fasit_data)[names(Fasit_data) == "NA"] <- "Strain_no"
colnames(Fasit_data) <- c("Strain_no", "LIN_mm_zone", "LIN_mm_zone_1","LIN_MIC_MTS","LIN_MIC_Etest","LIN_MIC_Etest_1")
Lre_data$Species <- as.factor(Lre_data$Species)
Lre_data$Strain_no <- as.factor(Lre_data$Strain_no)
Gradient_data <-  Lre_data[,c("lab_id", "Strain_no","Species", names(Lre_data)[grepl("Gradient", names(Lre_data))])]
Gradient_data <-  merge(Gradient_data, Fasit_data, by = "Strain_no", all.x = TRUE)
Gradient_data <- na.omit(Gradient_data)
Gradient_data <- within(Gradient_data, {
MIC <- ifelse(grepl("E-test/bioMerieux", rownames(Gradient_data)), Fasit_data$`LIN_MIC_Etest`, Fasit_data$`LIN_MIC_MTS`)
# event type: 3 = interval, 2 = left, 0 = right
event <- rep(3, nrow(Gradient_data))
event[union(grep("<", MIC), grep("<=", MIC))] <- 2
event[union(grep(">", MIC), grep(">=", MIC))] <- 0
# as numeric
MIC.num <- as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", ifelse(MIC==">256", 512,MIC))))))
# log MIC
log.MIC <- log2(MIC.num)
# log MIC for naive mean
log.MIC.naive <- ifelse(event!=0, log.MIC-0.5, log.MIC+0.5)
# as Surv
log.MIC.surv <- Surv(time = ifelse(event==3, log.MIC-1, log.MIC), time2 = log.MIC, event = event, type = "interval")
# lower and upper for WinBUGS
lower <- ifelse(event==3, log.MIC-1, ifelse(event==2, -100, log.MIC))
upper <- ifelse(event==3, log.MIC, ifelse(event==2, log.MIC, 100))
})
Gradient_Etest<- data.frame()
Gradient_MTS <- data.frame()
Gradient_Etest <- Gradient_data[Gradient_data$Gradient_test == "E-test/bioMerieux", ]
Gradient_MTS <- Gradient_data[Gradient_data$Gradient_test != "E-test/bioMerieux", ]
Gradient_Etest.data.sub <- subset(Gradient_Etest, select = c(Strain_no, Species, upper, lower, log.MIC))
# working dir
wbwd <- file.path(getwd(), "WinBUGS")
# bugs model
cat("model {
for (i in 1:n) {
y[i] ~ dnorm(mu[i], tau)I(lower[i], upper[i])
mu[i] <- inprod2(X[i, ], beta[]) + b.lab[lab[i]]
}
for (j in 1:n.lab) {
b.lab[j] ~ dnorm(0.0, tau.lab)
}
for (k in 1:n.beta) {
beta[k] ~ dnorm(0.0, 1.0E-4)
}
tau <- pow(sigma, -2)
sigma ~ dunif(0.01, 100)
tau.lab <- pow(sigma.lab, -2)
sigma.lab ~ dunif(0.01, 100)
}
}", file = file.path(wbwd, "model.txt"))
# bugs data
X <- model.matrix(~ (Strain_no+Species)^2, data = Gradient_Etest)
n <- nrow(X);
n.beta <- ncol(X);
Gradient_Etest$lab_id <- as.factor(Gradient_Etest$lab_id)
n.lab <- nlevels(Gradient_Etest$lab_id)
bugs.data <- with(Gradient_Etest, list(n = n, lower = lower, upper = upper, X = X, n.beta = n.beta, n.lab = n.lab, lab = as.numeric(lab_id)))
# bugs inits
bugs.inits <- function()
list(y = with(Gradient_Etest, runif(n, lower, upper)), b.lab = rnorm(n.lab, 0, 0.1), beta = rnorm(n.beta), sigma = runif(1), sigma.lab = runif(1))
# bugs fit
bugs.fit <- bugs(model.file = "model.txt", data = bugs.data, inits = bugs.inits,
parameters.to.save = c("beta", "b.lab", "sigma", "sigma.lab"),
n.chains = 2, n.iter = 5100, n.burnin = 100, n.thin = 10, debug = F, DIC = F, working.directory = wbwd)
read.bugsfit <- T
if (read.bugsfit) {
old.wd <- getwd()
setwd(wbwd)
bugs.fit <<- R2WinBUGS:::bugs.sims(n.chains = 2, n.iter = 5100, n.burnin = 100, n.thin = 10,
parameters.to.save = c("beta", "b.lab", "sigma", "sigma.lab"), DIC = F)
class(bugs.fit) <- "bugs"
setwd(old.wd)
}
attach.bugs(bugs.fit)
# labs compared to mean
lab.data <- data.frame(
lab = levels(Gradient_Etest$lab_id),
diff.log.MIC = colMeans(b.lab),
lower.diff.log.MIC = apply(b.lab, 2, quantile, 0.025),
upper.diff.log.MIC = apply(b.lab, 2, quantile, 0.975))
Gradient_Etest.newdata <- with(Gradient_Etest, expand.grid(Strain_no = levels(Strain_no), Species = levels(Species)))
# naive mean and mode
Gradient_Etest.newdata <- within(Gradient_Etest.newdata, {mode.log.MIC <- NA; E.log.MIC.naive <- NA; se.log.MIC.naive <- NA;})
k<-1
Gradient_Etest$Species <- as.factor(Gradient_Etest$Species)
for (i in 1:nlevels(Gradient_Etest$Strain_no)) {
for (j in 1:nlevels(Gradient_Etest$Species)) {
ant_value <- levels(Gradient_Etest$Strain_no)[i]
stam_value <- levels(Gradient_Etest$Species)[j]
Gradient_Etest.data.sub <- subset(Gradient_Etest, Strain_no == ant_value & Species == stam_value)
mod <- with(Gradient_Etest.data.sub, lm(log.MIC.naive ~ 1))
Gradient_Etest.newdata[k, "mode.log.MIC"] <- log2(as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", names(which.max(table(Gradient_Etest.data.sub$MIC)))))))))
Gradient_Etest.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
k <- k+1
}
}
Gradient_Etest.sub <- subset(Gradient_Etest, select = c(Strain_no, Species, upper, lower, log.MIC))
k<-1
Gradient_Etest$Species <- as.factor(Gradient_Etest$Species)
for (i in 1:nlevels(Gradient_Etest$Strain_no)) {
for (j in 1:nlevels(Gradient_Etest$Species)) {
ant_value <- levels(Gradient_Etest$Strain_no)[i]
stam_value <- levels(Gradient_Etest$Species)[j]
Gradient_Etest.data.sub <- subset(Gradient_Etest, Strain_no == ant_value & Species == stam_value)
mod <- with(Gradient_Etest.data.sub, lm(log.MIC.naive ~ 1))
Gradient_Etest.newdata[k, "mode.log.MIC"] <- log2(as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", names(which.max(table(Gradient_Etest.data.sub$MIC)))))))))
Gradient_Etest.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
k <- k+1
}
}
Gradient_Etest$Species <- as.factor(Gradient_Etest$Species)
Gradient_Etest$Species <- as.factor(Gradient_Etest$Species)
Gradient_Etest$Strain_no <- as.factor(Gradient_Etest$Strain_no)
for (i in 1:nlevels(Gradient_Etest$Strain_no)) {
for (j in 1:nlevels(Gradient_Etest$Species)) {
ant_value <- levels(Gradient_Etest$Strain_no)[i]
stam_value <- levels(Gradient_Etest$Species)[j]
Gradient_Etest.data.sub <- subset(Gradient_Etest, Strain_no == ant_value & Species == stam_value)
mod <- with(Gradient_Etest.data.sub, lm(log.MIC.naive ~ 1))
Gradient_Etest.newdata[k, "mode.log.MIC"] <- log2(as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", names(which.max(table(Gradient_Etest.data.sub$MIC)))))))))
Gradient_Etest.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
k <- k+1
}
}
View(Gradient_Etest)
k<-1
Gradient_Etest$Species <- as.factor(Gradient_Etest$Species)
Gradient_Etest$Strain_no <- as.factor(Gradient_Etest$Strain_no)
for (i in 1:nlevels(Gradient_Etest$Strain_no)) {
for (j in 1:nlevels(Gradient_Etest$Species)) {
ant_value <- levels(Gradient_Etest$Strain_no)[i]
stam_value <- levels(Gradient_Etest$Species)[j]
Gradient_Etest.data.sub <- subset(Gradient_Etest, Strain_no == ant_value & Species == stam_value)
# mod <- with(Gradient_Etest.data.sub, lm(log.MIC.naive ~ 1))
Gradient_Etest.newdata[k, "mode.log.MIC"] <- log2(as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", names(which.max(table(Gradient_Etest.data.sub$MIC)))))))))
# Gradient_Etest.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
k <- k+1
}
}
View(Gradient_data.data.sub)
k<-1
Gradient_Etest$Species <- as.factor(Gradient_Etest$Species)
Gradient_Etest$Strain_no <- as.factor(Gradient_Etest$Strain_no)
for (i in 1:nlevels(Gradient_Etest$Strain_no)) {
for (j in 1:nlevels(Gradient_Etest$Species)) {
ant_value <- levels(Gradient_Etest$Strain_no)[i]
stam_value <- levels(Gradient_Etest$Species)[j]
Gradient_Etest.data.sub <- subset(Gradient_Etest, Strain_no == ant_value & Species == stam_value)
# mod <- with(Gradient_Etest.data.sub, lm(log.MIC.naive ~ 1))
# Gradient_Etest.newdata[k, "mode.log.MIC"] <- log2(as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", names(which.max(table(Gradient_Etest.data.sub$MIC)))))))))
# Gradient_Etest.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
# k <- k+1
}
}
View(Gradient_data.data.sub)
print(ant_value)
print(stam_value)
for (i in 1:nlevels(Gradient_Etest$Strain_no)) {
for (j in 1:nlevels(Gradient_Etest$Species)) {
ant_value <- levels(Gradient_Etest$Strain_no)[i]
stam_value <- levels(Gradient_Etest$Species)[j]
print(ant_value)
print(stam_value)
Gradient_Etest.data.sub <- subset(Gradient_Etest, Strain_no == ant_value & Species == stam_value)
# mod <- with(Gradient_Etest.data.sub, lm(log.MIC.naive ~ 1))
# Gradient_Etest.newdata[k, "mode.log.MIC"] <- log2(as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", names(which.max(table(Gradient_Etest.data.sub$MIC)))))))))
# Gradient_Etest.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
# k <- k+1
}
}
k<-1
Gradient_Etest$Species <- as.factor(Gradient_Etest$Species)
Gradient_Etest$Strain_no <- as.factor(Gradient_Etest$Strain_no)
for (i in 1:nlevels(Gradient_Etest$Strain_no)) {
for (j in 1:nlevels(Gradient_Etest$Species)) {
ant_value <- levels(Gradient_Etest$Strain_no)[i]
stam_value <- levels(Gradient_Etest$Species)[j]
Gradient_Etest.data.sub <- subset(Gradient_Etest, Strain_no == ant_value & Species == stam_value)
mod <- with(Gradient_Etest.data.sub, lm(log.MIC.naive ~ 1))
# Gradient_Etest.newdata[k, "mode.log.MIC"] <- log2(as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", names(which.max(table(Gradient_Etest.data.sub$MIC)))))))))
# Gradient_Etest.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
# k <- k+1
}
}
Gradient_Etest$Species <- as.factor(Gradient_Etest$Species)
Gradient_Etest$Strain_no <- as.factor(Gradient_Etest$Strain_no)
for (i in 1:nlevels(Gradient_Etest$Strain_no)) {
for (j in 1:nlevels(Gradient_Etest$Species)) {
ant_value <- levels(Gradient_Etest$Strain_no)[i]
stam_value <- levels(Gradient_Etest$Species)[j]
Gradient_Etest.data.sub <- subset(Gradient_Etest, Strain_no == ant_value & Species == stam_value)
mod <- with(Gradient_Etest.data.sub, lm(log.MIC.naive ~ 1))
print(mod)
# Gradient_Etest.newdata[k, "mode.log.MIC"] <- log2(as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", names(which.max(table(Gradient_Etest.data.sub$MIC)))))))))
# Gradient_Etest.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
#
# k <- k+1
}
}
k<-1
Gradient_Etest$Species <- as.factor(Gradient_Etest$Species)
Gradient_Etest$Strain_no <- as.factor(Gradient_Etest$Strain_no)
for (i in 1:nlevels(Gradient_Etest$Strain_no)) {
for (j in 1:nlevels(Gradient_Etest$Species)) {
ant_value <- levels(Gradient_Etest$Strain_no)[i]
stam_value <- levels(Gradient_Etest$Species)[j]
Gradient_Etest.data.sub <- subset(Gradient_Etest, Strain_no == ant_value & Species == stam_value)
# mod <- with(Gradient_Etest.data.sub, lm(log.MIC.naive ~ 1))
print(log.MIC.naive)
# Gradient_Etest.newdata[k, "mode.log.MIC"] <- log2(as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", names(which.max(table(Gradient_Etest.data.sub$MIC)))))))))
# Gradient_Etest.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
#
# k <- k+1
}
}
View(Gradient_Etest.data.sub)
View(Gradient_Etest)
# nolint: commented_code_linter.
# Adjusted code for Han de Neeling data
library(survival)
library(R2WinBUGS)
library(survminer)
library(dplyr)
library(fitdistrplus)
library(ggplot2)
library(truncnorm)
setwd("C:/Users/ayoung/Desktop/Thesis/RCode")
getwd()
s <- 30 # strain numbers
n_o <- 10 # number of observations
# 10 lab 20 strains
# random number within boundaries
lb <- 0.0765 # lower boundary
ub <- 32 # upper boundary
left <- 0.00391 #can not be higher than mic boundary
right <- 64 # even higher
# 1< MIC < 32 increasing MIC
# mic_arr <- c(0.000977,0.00391,0.0156,0.0625,0.125, 0.25, 1, 2, 4, 8, 16, 32)
# mic_arr <- c(0.125, 0.25, 1, 2, 4, 8, 16, 32)
mic_arr <- c(0.0156,0.0625,0.125, 0.25, 1, 2, 4, 8, 16, 32,64,128)
# mic_arr <- c(0.125, 0.25, 1, 2, 4, 8, 16, 32)
sample.data <- data.frame()
refmic_sample.data <- data.frame()
for (x in 1:s) {
set.seed(x) # reset
# with chosen mean and SD
lab <- 1:n_o
stam <- as.character(x)
Y_act <- numeric(n_o)
Y_obs <- numeric(n_o) # can divide log2
lower <- numeric(n_o)
upper <- numeric(n_o)
MIC <- numeric(n_o)
mic_idx <- sample(1:length(mic_arr), 1)
mic_value <- mic_arr[mic_idx]
Y_act <- rnorm(n=n_o,mean=mic_value,sd=mic_value*2)
for (i in 1:n_o) {
MIC[i] <- mic_value
Y_act[i] <- max(lb, Y_act[i])
Y_act[i] <- min(ub,Y_act[i])
Y_obs[i] <- 2^ceiling(log2(Y_act[i]))
lower[i] <- 2^floor(log2(Y_act[i]))
upper[i] <- 2^ceiling(log2(Y_act[i]))
}
# mean should be close to 4
sample.data <- rbind(sample.data, data.frame(lab, stam, MIC, Y_act, Y_obs, lower, upper))
}
lab <- 1:s
stam <- 1:s
Y_act <- numeric(s)
Y_obs <- numeric(s) # can divide log2
lower <- numeric(s)
upper <- numeric(s)
MIC <- numeric(s)
for (x in 1:s) {
set.seed(x) # reset
mic_idx <- sample(1:length(mic_arr), 1)
mic_value <- mic_arr[mic_idx]
MIC[x] <- mic_value
Y_act[x] <- rnorm(n=1,mean=mic_value,sd=mic_value*2)
# with chosen mean and SD
if(Y_act[x] <0) Y_act[x] = Y_act[x]*-1
Y_act[x] <- max(lb, Y_act[x])
lower[x] <- 2^floor(log2(Y_act[x]))
upper[x] <- 2^ceiling(log2(Y_act[x]))
}
refmic_sample.data <-  data.frame(stam, MIC,upper,lower)
sample.data <- within(sample.data, {
# as character
# MIC <- as.character(MIC)
# event type: 3 = interval, 2 = left, 0 = right
event <- rep(3, nrow(sample.data))
event[Y_act < left] <- 2
# Set event to 2 for Y_act greater than right threshold
event[Y_act > right] <- 0
# log MIC
log.MIC <- log2(MIC)
# log MIC for naive mean
log.MIC.naive <- ifelse(event != 0, log.MIC - 0.5, log.MIC + 0.5)
# as Surv
mode.log.MIC <- log2(as.numeric(names(which.max(table(sample.data$MIC)))))
log.MIC.surv <- Surv(time = ifelse(event == 3, log.MIC - 1, log.MIC), time2 = log.MIC, event = event, type = "interval")
# # lower and upper for WinBUGS
lower <- ifelse(event == 3, log.MIC - 1, ifelse(event == 2, -100, log.MIC))
upper <- ifelse(event == 3, log.MIC, ifelse(event == 2, log.MIC, 100))
})
# create censored data objects
refmic_sample.data <- within(refmic_sample.data, {
# as character
# MIC <- as.character(MIC)
# event type: 3 = interval, 2 = left, 0 = right
event <- rep(3, nrow(refmic_sample.data))
event[Y_act < left] <- 2
# Set event to 2 for Y_act greater than right threshold
event[Y_act > right] <- 0
# log MIC
log.MIC <- log2(MIC)
# log MIC for naive mean
log.MIC.naive <- ifelse(event != 0, log.MIC - 0.5, log.MIC + 0.5)
# as Surv
mode.log.MIC <- log2(as.numeric(names(which.max(table(sample.data$MIC)))))
log.MIC.surv <- Surv(time = ifelse(event == 3, log.MIC - 1, log.MIC), time2 = log.MIC, event = event, type = "interval")
# lower and upper for WinBUGS
lower <- ifelse(event == 3, log.MIC - 1, ifelse(event == 2, -100, log.MIC))
upper <- ifelse(event == 3, log.MIC, ifelse(event == 2, log.MIC, 100))
})
sample.data <- within(sample.data, {
stam <- gsub("stam", "strain", stam)
lab <- factor(lab)
stam <- factor(stam)
})
refmic_sample.data.sub <- subset(refmic_sample.data, select = c(stam, upper, lower, log.MIC))
names(refmic_sample.data.sub) <- c("stam", "upper.log.MIC.ref", "lower.log.MIC.ref", "log.MIC.ref")
#
# model with WinBUGS
#
# working dir
wbwd <- file.path(getwd(), "WinBUGS")
# bugs model
cat("model {
for (i in 1:n) {
y[i] ~ dnorm(mu[i], tau)I(lower[i], upper[i])
mu[i] <- inprod2(X[i, ], beta[]) + b.lab[lab[i]]
}
for (j in 1:n.lab) {
b.lab[j] ~ dnorm(0.0, tau.lab)
}
for (k in 1:n.beta) {
beta[k] ~ dnorm(0.0, 1.0E-4)
}
tau <- pow(sigma, -2)
sigma ~ dunif(0.01, 100)
tau.lab <- pow(sigma.lab, -2)
sigma.lab ~ dunif(0.01, 100)
}
}", file = file.path(wbwd, "model.txt"))
# bugs data
X <- model.matrix(~ (stam)^2, data = sample.data)
n <- nrow(X)
n.beta <- ncol(X)
n.lab <- n_o
bugs.data <- with(sample.data, list(n = n, lower = lower, upper = upper, X = X, n.beta = n.beta, n.lab = n.lab, lab = as.numeric(lab)))
# bugs inits
bugs.inits <- function() {
list(y = with(sample.data, runif(n, lower, upper)), b.lab = rnorm(n.lab, -0.5,1), beta = rnorm(n.beta), sigma = runif(1), sigma.lab = runif(1))
}
# bugs fit
bugs.fit <- bugs(
model.file = "model.txt", data = bugs.data, inits = bugs.inits,
parameters.to.save = c("beta", "b.lab", "sigma", "sigma.lab"),
n.chains = 2, n.iter = 5100, n.burnin = 100, n.thin = 10, debug = F, DIC = F, working.directory = wbwd
)
read.bugsfit <- T
if (read.bugsfit) {
old.wd <- getwd()
setwd(wbwd)
bugs.fit <<- R2WinBUGS:::bugs.sims(
n.chains = 2, n.iter = 5100, n.burnin = 100, n.thin = 10,
parameters.to.save = c("beta", "b.lab", "sigma", "sigma.lab"), DIC = F
)
class(bugs.fit) <- "bugs"
setwd(old.wd)
}
attach.bugs(bugs.fit)
sample.data$lab <- as.factor(sample.data$lab)
# labs compared to mean
# confidence value
lab.data <- data.frame(
lab = levels(sample.data$lab),
diff.log.MIC = colMeans(b.lab),
lower.diff.log.MIC = apply(b.lab, 2, quantile, 0.025),
upper.diff.log.MIC = apply(b.lab, 2, quantile, 0.975))
sample.data$stam <- as.factor(sample.data$stam)
# make sample new data
refmic_sample.newdata <- with(sample.data, expand.grid(stam = levels(stam)))
refmic_sample.newdata <- within(refmic_sample.newdata, {
mode.log.MIC <- NA
E.log.MIC.naive <- NA
se.log.MIC.naive <- NA
time1 <- NA
time2 <- NA
})
View(sample.data)
View(Gradient_Etest)
k <- 1
for (j in 1:nlevels(sample.data$stam)) {
stam_value <- levels(sample.data$stam)[j]
sample.data.sub <- subset(sample.data, stam == stam_value)
mod <- with(sample.data.sub, lm(log.MIC.naive ~ 1))
refmic_sample.newdata[k, "mode.log.MIC"] <- log2(as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", names(which.max(table(sample.data.sub$MIC)))))))))
refmic_sample.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
k<-k+1
}
View(refmic_sample.data.sub)
View(sample.data.sub)
for (i in 1:nlevels(Gradient_Etest$Strain_no)) {
for (j in 1:nlevels(Gradient_Etest$Species)) {
ant_value <- levels(Gradient_Etest$Strain_no)[i]
stam_value <- levels(Gradient_Etest$Species)[j]
Gradient_Etest.data.sub <- subset(Gradient_Etest, Strain_no == ant_value & Species == stam_value)
# mod <- with(Gradient_Etest.data.sub, lm(log.MIC.naive ~ 1))
print(log.MIC.naive)
# Gradient_Etest.newdata[k, "mode.log.MIC"] <- log2(as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", names(which.max(table(Gradient_Etest.data.sub$MIC)))))))))
# Gradient_Etest.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
#
# k <- k+1
}
}
View(Gradient_Etest.data.sub)
Gradient_Etest$Species <- as.factor(Gradient_Etest$Species)
k<-1
Gradient_Etest$Species <- as.factor(Gradient_Etest$Species)
Gradient_Etest$Strain_no <- as.factor(Gradient_Etest$Strain_no)
for (i in 1:nlevels(Gradient_Etest$Strain_no)) {
for (j in 1:nlevels(Gradient_Etest$Species)) {
ant_value <- levels(Gradient_Etest$Strain_no)[i]
stam_value <- levels(Gradient_Etest$Species)[j]
Gradient_Etest.data.sub <- subset(Gradient_Etest, Strain_no == ant_value & Species == stam_value)
mod <- with(Gradient_Etest.data.sub, lm(log.MIC.naive ~ 1))
# Gradient_Etest.newdata[k, "mode.log.MIC"] <- log2(as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", names(which.max(table(Gradient_Etest.data.sub$MIC)))))))))
# Gradient_Etest.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
#
# k <- k+1
}
}
k<-1
Gradient_Etest$Species <- as.factor(Gradient_Etest$Species)
Gradient_Etest$Strain_no <- as.factor(Gradient_Etest$Strain_no)
for (i in 1:nlevels(Gradient_Etest$Strain_no)) {
for (j in 1:nlevels(Gradient_Etest$Species)) {
ant_value <- levels(Gradient_Etest$Strain_no)[i]
stam_value <- levels(Gradient_Etest$Species)[j]
Gradient_Etest.data.sub <- subset(Gradient_Etest, Strain_no == ant_value & Species == stam_value)
mod <- with(Gradient_Etest.data.sub, lm(log.MIC.naive ~ 1))
# Gradient_Etest.newdata[k, "mode.log.MIC"] <- log2(as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", names(which.max(table(Gradient_Etest.data.sub$MIC)))))))))
# Gradient_Etest.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
#
# k <- k+1
}
}
k<-1
Gradient_Etest$Species <- as.factor(Gradient_Etest$Species)
Gradient_Etest$Strain_no <- as.factor(Gradient_Etest$Strain_no)
Gradient_Etest$log.MIC.naive <- as.factor(Gradient_Etest$log.MIC.naive)
for (i in 1:nlevels(Gradient_Etest$Strain_no)) {
for (j in 1:nlevels(Gradient_Etest$Species)) {
ant_value <- levels(Gradient_Etest$Strain_no)[i]
stam_value <- levels(Gradient_Etest$Species)[j]
Gradient_Etest.data.sub <- subset(Gradient_Etest, Strain_no == ant_value & Species == stam_value)
mod <- with(Gradient_Etest.data.sub, lm(log.MIC.naive ~ 1))
# Gradient_Etest.newdata[k, "mode.log.MIC"] <- log2(as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", names(which.max(table(Gradient_Etest.data.sub$MIC)))))))))
# Gradient_Etest.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
#
# k <- k+1
}
}
k<-1
Gradient_Etest$Species <- as.factor(Gradient_Etest$Species)
Gradient_Etest$Strain_no <- as.factor(Gradient_Etest$Strain_no)
for (i in 1:nlevels(Gradient_Etest$Strain_no)) {
for (j in 1:nlevels(Gradient_Etest$Species)) {
ant_value <- levels(Gradient_Etest$Strain_no)[i]
stam_value <- levels(Gradient_Etest$Species)[j]
Gradient_Etest.data.sub <- subset(Gradient_Etest, Strain_no == ant_value & Species == stam_value)
mod <- with(Gradient_Etest.data.sub, lm(log.MIC.naive ~ 1))
# Gradient_Etest.newdata[k, "mode.log.MIC"] <- log2(as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", names(which.max(table(Gradient_Etest.data.sub$MIC)))))))))
# Gradient_Etest.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
#
# k <- k+1
}
}
install.packages("quarto")
