for (j in 1:nlevels(gono.data$stam)) {
gono.data.sub <- subset(gono.data, ant==levels(ant)[i] & stam==levels(stam)[j])
mod <- with(gono.data.sub, lm(log.MIC.naive ~ 1))
refmic.newdata[k, "mode.log.MIC"] <- with(gono.data.sub, log2(as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", names(which.max(table(MIC))))))))))
refmic.newdata[k, c("E.log.MIC.naive", "se.log.MIC.naive")] <- c(coef(mod), sqrt(vcov(mod)))
k <- k+1
}
#################################################################
# naive mean and mode
refmic.newdata <- within(refmic.newdata, {mode.log.MIC <- NA; E.log.MIC.naive <- NA; se.log.MIC.naive <- NA})
#################################################################
# naive mean and mode
refmic.newdata <- within(refmic.newdata, {mode.log.MIC <- NA; E.log.MIC.naive <- NA; se.log.MIC.naive <- NA})
# Adjusted code for Han de Neeling data
library(survival)
library(R2WinBUGS)
setwd("C:/Users/ayoung/Desktop/RCode")
getwd()
# read data
gono.data <- read.table("gono_in.txt", header = T, sep = "\t") # gonokokken data
refmic.data <- read.table("reference MICs_U.txt", header = T, sep = "\t") # reference MICs
# reshape gono.data into long format
gono.data <- reshape(data = gono.data,
varying = names(gono.data)[!is.element(names(gono.data), c("lab", "ant", "agar"))],
v.names = "MIC", timevar = "stam",
times = names(gono.data)[!is.element(names(gono.data), c("lab", "ant", "agar"))],
direction = "long")
# create censored data objects
gono.data <- within(gono.data, {
# as character
MIC <- as.character(MIC)
# event type: 3 = interval, 2 = left, 0 = right
event <- rep(3, nrow(gono.data))
event[union(grep("<", MIC), grep("<=", MIC))] <- 2
event[union(grep(">", MIC), grep(">=", MIC))] <- 0
# as numeric
MIC.num <- as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", MIC)))))
# log MIC
log.MIC <- log2(MIC.num)
# log MIC for naive mean
log.MIC.naive <- ifelse(event!=0, log.MIC-0.5, log.MIC+0.5)
# as Surv
log.MIC.surv <- Surv(time = ifelse(event==3, log.MIC-1, log.MIC), time2 = log.MIC, event = event, type = "interval")
# lower and upper for WinBUGS
lower <- ifelse(event==3, log.MIC-1, ifelse(event==2, -100, log.MIC))
upper <- ifelse(event==3, log.MIC, ifelse(event==2, log.MIC, 100))
})
refmic.data <- within(refmic.data, {
# as character
MIC <- as.character(MIC)
# event type: 3 = interval, 2 = left, 0 = right
event <- rep(3, nrow(refmic.data))
event[union(grep("<", MIC), grep("<=", MIC))] <- 2
event[union(grep(">", MIC), grep(">=", MIC))] <- 0
# as numeric
MIC.num <- as.numeric(sub("<", "", sub("<=", "" ,sub(">", "", sub(c(">="), "", MIC)))))
# log MIC
log.MIC <- ceiling(log2(MIC.num))
# as Surv
log.MIC.surv <- Surv(time = ifelse(event==3, log.MIC-1, log.MIC), time2 = log.MIC, event = event, type = "interval")
# lower and upper for WinBUGS
lower <- ifelse(event==3, log.MIC-1, ifelse(event==2, -100, log.MIC))
upper <- ifelse(event==3, log.MIC, ifelse(event==2, log.MIC, 100))
})
# "stam" -> "strain" & lab, stam as factor
gono.data <- within(gono.data, {
stam <- gsub("stam", "strain", stam)
lab <- factor(lab)
stam <- factor(stam)
})
refmic.data <- within(refmic.data, {
stam <- gsub("stam", "strain", stam)
stam <- factor(stam)
})
# remove cef data
gono.data <- droplevels(subset(gono.data, ant!="cef"))
refmic.data <- droplevels(subset(refmic.data, ant!="cef"))
# selection of refmic.datra
refmic.data.sub <- subset(refmic.data, select = c(stam, ant, upper, lower, log.MIC))
names(refmic.data.sub) <- c("stam", "ant", "upper.log.MIC.ref", "lower.log.MIC.ref", "log.MIC.ref")
#
# model with WinBUGS
#
# working dir
wbwd <- file.path(getwd(), "WinBUGS")
# bugs model
cat("model {
for (i in 1:n) {
y[i] ~ dnorm(mu[i], tau)I(lower[i], upper[i])
mu[i] <- inprod2(X[i, ], beta[]) + b.lab[lab[i]]
}
for (j in 1:n.lab) {
b.lab[j] ~ dnorm(0.0, tau.lab)
}
for (k in 1:n.beta) {
beta[k] ~ dnorm(0.0, 1.0E-4)
}
tau <- pow(sigma, -2)
sigma ~ dunif(0.01, 100)
tau.lab <- pow(sigma.lab, -2)
sigma.lab ~ dunif(0.01, 100)
}
}", file = file.path(wbwd, "model.txt"))
# bugs data
X <- model.matrix(~ (stam+ant)^2, data = gono.data)
n <- nrow(X); n.beta <- ncol(X); n.lab <- 17
bugs.data <- with(gono.data, list(n = n, lower = lower, upper = upper, X = X, n.beta = n.beta, n.lab = n.lab, lab = as.numeric(lab)))
# bugs inits
bugs.inits <- function()
list(y = with(gono.data, runif(n, lower, upper)), b.lab = rnorm(n.lab, 0, 0.1), beta = rnorm(n.beta), sigma = runif(1), sigma.lab = runif(1))
# bugs fit
bugs.fit <- bugs(model.file = "model.txt", data = bugs.data, inits = bugs.inits,
parameters.to.save = c("beta", "b.lab", "sigma", "sigma.lab"),
n.chains = 2, n.iter = 5100, n.burnin = 100, n.thin = 10, debug = F, DIC = F, working.directory = wbwd)
